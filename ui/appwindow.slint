import { Button, VerticalBox, HorizontalBox, ListView, ScrollView } from "std-widgets.slint";

enum ContainerStatus {
    Running,
    Exited,
    Unknown,
}

enum ContainerAction {
    Start,
    Stop,
}

struct ContainerData {
    id: string,
    name: string,
    status: ContainerStatus,
}

component ContainerItem {
    in-out property <ContainerData> data;
    callback status_change(ContainerAction);
    Rectangle {
        background: #c2c2c2;
        VerticalLayout {
            alignment: center;
            HorizontalBox {
                Text {
                    text: data.id;
                }
                Text {
                    text: data.name;
                }
                if data.status == ContainerStatus.Running: Button {
                    text: "Stop";
                    clicked => {
                        root.status_change(ContainerAction.Stop);
                    }
                }
                if data.status == ContainerStatus.Exited: Button {
                    text: "Start";
                    clicked => {
                        root.status_change(ContainerAction.Start);
                    }
                }
            }
        }
    }
}

export component AppWindow inherits Window {
    min-width: 600px;
    min-height: 400px;
    title: "Docker UI";
    in-out property <[ContainerData]> containers: [];
    callback refresh_containers();
    callback run_container(string);
    callback stop_container(string);
    HorizontalBox {
        VerticalBox {
            HorizontalBox {
                alignment: start;
                height: 50px;
                Text {
                    text: "Docker UI";
                    font-size: 16px;
                    horizontal-alignment: center;
                }
                Button {
                    text: "Refresh";
                    clicked => {
                        root.refresh_containers();
                    }
                }
            }
            VerticalBox {
                height: 100px;
                for c in containers: ContainerItem {
                    data: c;
                    status_change(action) => {
                        if action == ContainerAction.Start {
                            root.run_container(c.id);
                            root.refresh_containers();
                            return;
                        } else if action == ContainerAction.Stop {
                            root.stop_container(c.id);
                            root.refresh_containers();
                            return;
                        }
                    }
                }
            }
        }
    }
}
